import random
from Class_extremities_and_adjacencies import Extremities_and_adjacencies

class Node:

    def __init__(self, state=None):
        self.state = state
        get_chromosomes = Node.find_chromosomes(self, self.state)
        self.linear_chromosomes = get_chromosomes[0]
        self.circular_chromosomes = get_chromosomes[1]

    def find_next_extremity(self, current, next_extremity):
        if current[0] == next_extremity:
            if current[1] % 1 == 0:
                next = current[1] + 0.5
            else:
                next = current[1] - 0.5
        else:
            if current[0] % 1 == 0:
                next = current[0] + 0.5
            else:
                next = current[0] - 0.5
        return next

    def find_next_adjacency(self, next_extremity, chromosome, not_telomeres):
        for element in not_telomeres:
            if element[0] == next_extremity or element[1] == next_extremity:
                current = element
                chromosome.append(current)
                not_telomeres.remove(current)
                next_extremity = Node.find_next_extremity(self, current, next_extremity)
                return next_extremity, chromosome, not_telomeres
        return [next_extremity]

    def find_adjacency_cycle(self, next_extremity, chromosome, not_telomeres):


        next_adjacency = Node.find_next_adjacency(self, next_extremity, chromosome, not_telomeres)

        while len(next_adjacency) != 1:

            next_extremity = next_adjacency[0]
            next_adjacency = Node.find_next_adjacency(self, next_extremity, chromosome, not_telomeres)


        else:
            next_extremity = next_adjacency[0]

            return next_extremity, chromosome, not_telomeres

    def find_chromosomes(self, adjacencies):

        telomeres = [element for element in adjacencies if type(element) is not tuple]
        not_telomeres = [element for element in adjacencies if type(element) is tuple]

        linear_chromosomes = []
        circular_chromosomes = []
        chromosome = []
        i = 0

        # find linear chromosomes
        while len(telomeres) > 0:

            i += 1
            current = telomeres[0]

            telomeres.remove(current)
            chromosome.append(current)

            if current % 1 == 0:
                next_extremity = current + 0.5
            else:
                next_extremity = current - 0.5

            # if single gene chromosome
            if next_extremity in telomeres:
                current = next_extremity

                telomeres.remove(current)
                chromosome.append(current)
                linear_chromosomes.append(chromosome)
                chromosome = []

            # else find adjacency cycle
            else:
                adjacency_cycle = Node.find_adjacency_cycle(self, next_extremity, chromosome, not_telomeres)
                next_extremity = adjacency_cycle[0]

                if next_extremity in telomeres:
                    current = next_extremity
                    telomeres.remove(current)
                    chromosome.append(current)
                    linear_chromosomes.append(chromosome)
                    chromosome = []

        # find circular chromosomes
        while len(not_telomeres) > 0:
            current = not_telomeres[0]
            not_telomeres.remove(current)
            chromosome.append(current)

            # find next extremity:
            if current[0] % 1 == 0:
                next_extremity = current[0] + 0.5
            else:
                next_extremity = current[0] - 0.5

            # if it is a single gene chromosome:
            if next_extremity == current[1]:
                ordered_circular_chromosome = []

                circular_chromosomes.append(chromosome)
                chromosome = []

            # go find adjacency cycle
            else:
                adjacency_cycle = Node.find_adjacency_cycle(self, next_extremity, chromosome, not_telomeres)
                next_extremity = adjacency_cycle[0]

                # if at end of circular chromosome
                if next_extremity == chromosome[0][1]:
                    ordered_circular_chromosome =[]

                    circular_chromosomes.append(chromosome)
                    chromosome = []
                    print()
        return linear_chromosomes, circular_chromosomes

    def evolve(self, num_inv=0, num_fus=0, num_fis=0, num_b_trl=0, num_u_trl=0, num_trp1=0, num_trp2=0):
        total = num_b_trl+num_fis+num_fus+num_inv+num_trp1+num_trp2+num_u_trl
        inv_n = num_inv
        fus_n = num_fus
        fis_n = num_fis
        b_trl_n = num_b_trl
        u_trl_n = num_u_trl
        trp1_n = num_trp1
        trp2_n = num_trp2

        while total > 0:

        pass

    def invertion(self):
        Node.find_chromosomes(self, self.state)
        chrm_num = random.randint(0, len(self.linear_chromosomes)-1)
        print('chrm num: ', chrm_num)
        print('linear chrm: ', self.linear_chromosomes)
        adjacencies = [element for element in self.linear_chromosomes[chrm_num] if type(element) is tuple]
        print('adjacencies: ', adjacencies)

        adj1_num = random.randint(0, len(adjacencies)-1)
        adj2_num = random.randint(0, len(adjacencies)-1)

        while adj1_num == adj2_num:
            adj2_num = random.randint(0, len(adjacencies)-1)

        print('adj1 num: ', adj1_num)
        print('adj2 num: ', adj2_num)

        adj1 = adjacencies[adj1_num]
        adj2 = adjacencies[adj2_num]


        if adj1[0] < adj2[0]:
            new_adj1 = (adj1[0], adj2[0])
        else:
            new_adj1 = (adj2[0], adj1[0])

        if adj1[1] < adj2[1]:
            new_adj2 = (adj1[1], adj2[1])
        else:
            new_adj2 = (adj2[1], adj1[1])

        #perfrom operation
        self.state.remove(adj1)
        self.state.remove(adj2)
        self.state.append(new_adj1)
        self.state.append(new_adj2)

    def transposition1(self):
        get_adjacencies = Extremities_and_adjacencies()

        # exsision and circularization

        Node.find_chromosomes(self, self.state)
        chrm_num = random.randint(0, len(self.linear_chromosomes) - 1)
        print('chrm num: ', chrm_num)
        print('linear chrm: ', self.linear_chromosomes)
        adjacencies = [element for element in self.linear_chromosomes[chrm_num] if type(element) is tuple]
        print('adjacencies: ', adjacencies)

        adj1_num = random.randint(0, len(adjacencies) - 1)
        adj2_num = random.randint(0, len(adjacencies) - 1)

        while adj1_num == adj2_num:
            adj2_num = random.randint(0, len(adjacencies) - 1)

        print('adj1 num: ', adj1_num)
        print('adj2 num: ', adj2_num)

        adj1 = adjacencies[adj1_num]
        adj2 = adjacencies[adj2_num]


        if adj1[0] < adj2[1]:
            new_adj1 = (adj1[0], adj2[1])
        else:
            new_adj1 = (adj2[1], adj1[0])

        if adj1[1] < adj2[0]:
            new_adj2 = (adj1[1], adj2[0])
        else:
            new_adj2 = (adj2[0], adj1[1])


        # perfrom operation
        self.state.remove(adj1)
        self.state.remove(adj2)
        self.state.append(new_adj1)
        self.state.append(new_adj2)

        get_chromosomes = Node.find_chromosomes(self, self.state)
        self.linear_chromosomes = get_chromosomes[0]
        self.circular_chromosomes = get_chromosomes[1]

        print(new_adj1, new_adj2)
        if new_adj1 in self.circular_chromosomes[0]:
            join = new_adj1
            excision = new_adj2
        else:
            join = new_adj2
            excision = new_adj1



        print('state 1: ',get_adjacencies.adjacencies_to_genome(self.state))

        #decircularization and reinsertion

        adj1 = join
        chrm_num = random.randint(0, len(self.linear_chromosomes) - 1)
        adjacencies = [element for element in self.linear_chromosomes[chrm_num] if type(element) is tuple]
        adj2_num = random.randint(0, len(adjacencies) - 1)
        adj2 = adjacencies[adj2_num]

        while adj2 == excision:
            chrm_num = random.randint(0, len(self.linear_chromosomes) - 1)
            adjacencies = [element for element in self.linear_chromosomes[chrm_num] if type(element) is tuple]
            adj2_num = random.randint(0, len(adjacencies) - 1)
            adj2 = adjacencies[adj2_num]

        if adj1[0] < adj2[1]:
            new_adj1 = (adj1[0], adj2[1])
        else:
            new_adj1 = (adj2[1], adj1[0])

        if adj1[1] < adj2[0]:
            new_adj2 = (adj1[1], adj2[0])
        else:
            new_adj2 = (adj2[0], adj1[1])

        # perfrom operation
        self.state.remove(adj1)
        self.state.remove(adj2)
        self.state.append(new_adj1)
        self.state.append(new_adj2)

    def transposition2(self):
        get_adjacencies = Extremities_and_adjacencies()

        # exsision and circularization

        Node.find_chromosomes(self, self.state)
        chrm_num = random.randint(0, len(self.linear_chromosomes) - 1)
        adjacencies = [element for element in self.linear_chromosomes[chrm_num] if type(element) is tuple]

        adj1_num = random.randint(0, len(adjacencies) - 1)
        adj2_num = random.randint(0, len(adjacencies) - 1)

        while adj1_num == adj2_num:
            adj2_num = random.randint(0, len(adjacencies) - 1)

        adj1 = adjacencies[adj1_num]
        adj2 = adjacencies[adj2_num]

        if adj1[0] < adj2[1]:
            new_adj1 = (adj1[0], adj2[1])
        else:
            new_adj1 = (adj2[1], adj1[0])

        if adj1[1] < adj2[0]:
            new_adj2 = (adj1[1], adj2[0])
        else:
            new_adj2 = (adj2[0], adj1[1])

        # single gene chromosomes are not permitted as cut=join
        while int(new_adj1[0])==int(new_adj1[1]) or int(new_adj2[0])==int(new_adj2[1]):

            chrm_num = random.randint(0, len(self.linear_chromosomes) - 1)

            adjacencies = [element for element in self.linear_chromosomes[chrm_num] if type(element) is tuple]

            adj1_num = random.randint(0, len(adjacencies) - 1)
            adj2_num = random.randint(0, len(adjacencies) - 1)

            while adj1_num == adj2_num:
                adj2_num = random.randint(0, len(adjacencies) - 1)

            adj1 = adjacencies[adj1_num]
            adj2 = adjacencies[adj2_num]

            if adj1[0] < adj2[1]:
                new_adj1 = (adj1[0], adj2[1])
            else:
                new_adj1 = (adj2[1], adj1[0])

            if adj1[1] < adj2[0]:
                new_adj2 = (adj1[1], adj2[0])
            else:
                new_adj2 = (adj2[0], adj1[1])

        # perfrom operation
        self.state.remove(adj1)
        self.state.remove(adj2)
        self.state.append(new_adj1)
        self.state.append(new_adj2)

        get_chromosomes = Node.find_chromosomes(self, self.state)
        self.linear_chromosomes = get_chromosomes[0]
        self.circular_chromosomes = get_chromosomes[1]

        if new_adj1 in self.circular_chromosomes[0]:
            join = new_adj1
            excision = new_adj2
        else:
            join = new_adj2
            excision = new_adj1

        print('state 1: ', get_adjacencies.adjacencies_to_genome(self.state))

        # decircularization and reinsertion

        adj1_num = random.randint(0, len(self.circular_chromosomes[0])-1)
        adj1 = self.circular_chromosomes[0][adj1_num]

        while adj1 == join:
            adj1_num = random.randint(0, len(self.circular_chromosomes[0]))
            adj1 = self.circular_chromosomes[0][adj1_num]

        chrm_num = random.randint(0, len(self.linear_chromosomes) - 1)
        adjacencies = [element for element in self.linear_chromosomes[chrm_num] if type(element) is tuple]
        adj2_num = random.randint(0, len(adjacencies) - 1)
        adj2 = adjacencies[adj2_num]

        while adj2 == excision:
            chrm_num = random.randint(0, len(self.linear_chromosomes) - 1)
            adjacencies = [element for element in self.linear_chromosomes[chrm_num] if type(element) is tuple]
            adj2_num = random.randint(0, len(adjacencies) - 1)
            adj2 = adjacencies[adj2_num]

        if adj1[0] < adj2[1]:
            new_adj1 = (adj1[0], adj2[1])
        else:
            new_adj1 = (adj2[1], adj1[0])

        if adj1[1] < adj2[0]:
            new_adj2 = (adj1[1], adj2[0])
        else:
            new_adj2 = (adj2[0], adj1[1])

        # perfrom operation
        self.state.remove(adj1)
        self.state.remove(adj2)
        self.state.append(new_adj1)
        self.state.append(new_adj2)

    def balanced_translocation(self):
        Node.find_chromosomes(self, self.state)
        chrm_num_1 = random.randint(0, len(self.linear_chromosomes) - 1)
        chrm_num_2 = random.randint(0, len(self.linear_chromosomes) - 1)
        while chrm_num_1==chrm_num_2:
            chrm_num_2 = random.randint(0, len(self.linear_chromosomes) - 1)

        adjacencies_chrm1 = [element for element in self.linear_chromosomes[chrm_num_1] if type(element) is tuple]
        adjacencies_chrm2 = [element for element in self.linear_chromosomes[chrm_num_2] if type(element) is tuple]
        adj1_num = random.randint(0, len(adjacencies_chrm1) - 1)
        adj2_num = random.randint(0, len(adjacencies_chrm2) - 1)

        adj1 = adjacencies_chrm1[adj1_num]
        adj2 = adjacencies_chrm2[adj2_num]

        if adj1[0] < adj2[1]:
            new_adj1 = (adj1[0], adj2[1])
        else:
            new_adj1 = (adj2[1], adj1[0])

        if adj1[1] < adj2[0]:
            new_adj2 = (adj1[1], adj2[0])
        else:
            new_adj2 = (adj2[0], adj1[1])

        # perfrom operation
        self.state.remove(adj1)
        self.state.remove(adj2)
        self.state.append(new_adj1)
        self.state.append(new_adj2)


    def unbalanced_translocation(self):
        Node.find_chromosomes(self, self.state)
        chrm_num_1 = random.randint(0, len(self.linear_chromosomes) - 1)
        chrm_num_2 = random.randint(0, len(self.linear_chromosomes) - 1)
        while chrm_num_1==chrm_num_2:
            chrm_num_2 = random.randint(0, len(self.linear_chromosomes) - 1)

        adjacencies_chrm1 = [element for element in self.linear_chromosomes[chrm_num_1] if type(element) is tuple]
        telomeres_chrm2 = [element for element in self.linear_chromosomes[chrm_num_2] if type(element) is not tuple]
        adj1_num = random.randint(0, len(adjacencies_chrm1) - 1)
        adj2_num = random.randint(0, len(telomeres_chrm2) - 1)

        adj1 = adjacencies_chrm1[adj1_num]
        telo2 = telomeres_chrm2[adj2_num]

        if telo2 < adj1[0]:
            new_adj1 = (telo2, adj1[0])
        else:
            new_adj1 = (adj1[0], telo2)


        # perfrom operation
        self.state.remove(adj1)
        self.state.remove(telo2)
        self.state.append(new_adj1)
        self.state.append(adj1[1])

    def fission(self):
        Node.find_chromosomes(self, self.state)
        chrm_num = random.randint(0, len(self.linear_chromosomes) - 1)
        adjacencies = [element for element in self.linear_chromosomes[chrm_num] if type(element) is tuple]
        adj_num = random.randint(0, len(adjacencies) - 1)

        adj = adjacencies[adj_num]

        self.state.remove(adj)
        self.state.append(adj[0])
        self.state.append(adj[1])

    def fusion(self):
        Node.find_chromosomes(self, self.state)
        chrm_num_1 = random.randint(0, len(self.linear_chromosomes) - 1)
        chrm_num_2 = random.randint(0, len(self.linear_chromosomes) - 1)
        while chrm_num_1 == chrm_num_2:
            chrm_num_2 = random.randint(0, len(self.linear_chromosomes) - 1)

        telomeres_chrm1 = [element for element in self.linear_chromosomes[chrm_num_1] if type(element) is not tuple]
        telomeres_chrm2 = [element for element in self.linear_chromosomes[chrm_num_2] if type(element) is not tuple]
        telo1_num = random.randint(0, len(telomeres_chrm1) - 1)
        telo2_num = random.randint(0, len(telomeres_chrm2) - 1)

        telo1 = telomeres_chrm1[telo1_num]
        telo2 =telomeres_chrm2[telo2_num]

        if telo1 < telo2:
            new_adj = (telo1, telo2)
        else:
            new_adj = (telo2, telo1)

        # perfrom operation
        self.state.remove(telo1)
        self.state.remove(telo2)
        self.state.append(new_adj)










